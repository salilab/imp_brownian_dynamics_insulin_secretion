# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


# This wrapper is part of IMP,
# Copyright 2007-2025 IMP Inventors. All rights reserved.

from __future__ import print_function, division, absolute_import



from sys import version_info as _swig_python_version_info
import _IMP_insulinsecretion

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class IMP_INSULINSECRETION_SwigPyIterator(object):
    r"""Proxy of C++ swig::IMP_INSULINSECRETION_SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _IMP_insulinsecretion.delete_IMP_INSULINSECRETION_SwigPyIterator

    def value(self):
        r"""value(IMP_INSULINSECRETION_SwigPyIterator self) -> PyObject *"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(IMP_INSULINSECRETION_SwigPyIterator self, size_t n=1) -> IMP_INSULINSECRETION_SwigPyIterator"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(IMP_INSULINSECRETION_SwigPyIterator self, size_t n=1) -> IMP_INSULINSECRETION_SwigPyIterator"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(IMP_INSULINSECRETION_SwigPyIterator self, IMP_INSULINSECRETION_SwigPyIterator x) -> ptrdiff_t"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(IMP_INSULINSECRETION_SwigPyIterator self, IMP_INSULINSECRETION_SwigPyIterator x) -> bool"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(IMP_INSULINSECRETION_SwigPyIterator self) -> IMP_INSULINSECRETION_SwigPyIterator"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator_copy(self)

    def next(self):
        r"""next(IMP_INSULINSECRETION_SwigPyIterator self) -> PyObject *"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(IMP_INSULINSECRETION_SwigPyIterator self) -> PyObject *"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(IMP_INSULINSECRETION_SwigPyIterator self) -> PyObject *"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(IMP_INSULINSECRETION_SwigPyIterator self, ptrdiff_t n) -> IMP_INSULINSECRETION_SwigPyIterator"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(IMP_INSULINSECRETION_SwigPyIterator self, IMP_INSULINSECRETION_SwigPyIterator x) -> bool"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(IMP_INSULINSECRETION_SwigPyIterator self, IMP_INSULINSECRETION_SwigPyIterator x) -> bool"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(IMP_INSULINSECRETION_SwigPyIterator self, ptrdiff_t n) -> IMP_INSULINSECRETION_SwigPyIterator"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(IMP_INSULINSECRETION_SwigPyIterator self, ptrdiff_t n) -> IMP_INSULINSECRETION_SwigPyIterator"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(IMP_INSULINSECRETION_SwigPyIterator self, ptrdiff_t n) -> IMP_INSULINSECRETION_SwigPyIterator"""
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(IMP_INSULINSECRETION_SwigPyIterator self, ptrdiff_t n) -> IMP_INSULINSECRETION_SwigPyIterator
        __sub__(IMP_INSULINSECRETION_SwigPyIterator self, IMP_INSULINSECRETION_SwigPyIterator x) -> ptrdiff_t
        """
        return _IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register IMP_INSULINSECRETION_SwigPyIterator in _IMP_insulinsecretion:
_IMP_insulinsecretion.IMP_INSULINSECRETION_SwigPyIterator_swigregister(IMP_INSULINSECRETION_SwigPyIterator)

_value_types=[]
_object_types=[]
_raii_types=[]
_plural_types=[]

IMP_DEBUG = _IMP_insulinsecretion.IMP_DEBUG

IMP_RELEASE = _IMP_insulinsecretion.IMP_RELEASE

IMP_SILENT = _IMP_insulinsecretion.IMP_SILENT

IMP_PROGRESS = _IMP_insulinsecretion.IMP_PROGRESS

IMP_TERSE = _IMP_insulinsecretion.IMP_TERSE

IMP_VERBOSE = _IMP_insulinsecretion.IMP_VERBOSE

IMP_MEMORY = _IMP_insulinsecretion.IMP_MEMORY

IMP_NONE = _IMP_insulinsecretion.IMP_NONE

IMP_USAGE = _IMP_insulinsecretion.IMP_USAGE

IMP_INTERNAL = _IMP_insulinsecretion.IMP_INTERNAL

IMP_KERNEL_HAS_LOG4CXX = _IMP_insulinsecretion.IMP_KERNEL_HAS_LOG4CXX

IMP_COMPILER_HAS_CEREAL_RAW_POINTER = _IMP_insulinsecretion.IMP_COMPILER_HAS_CEREAL_RAW_POINTER

IMP_COMPILER_HAS_DEBUG_VECTOR = _IMP_insulinsecretion.IMP_COMPILER_HAS_DEBUG_VECTOR

IMP_COMPILER_HAS_RANDOM_SHUFFLE = _IMP_insulinsecretion.IMP_COMPILER_HAS_RANDOM_SHUFFLE

IMP_COMPILER_HAS_THREE_WAY = _IMP_insulinsecretion.IMP_COMPILER_HAS_THREE_WAY

IMP_KERNEL_HAS_BOOST_RANDOM = _IMP_insulinsecretion.IMP_KERNEL_HAS_BOOST_RANDOM

IMP_KERNEL_HAS_GPERFTOOLS = _IMP_insulinsecretion.IMP_KERNEL_HAS_GPERFTOOLS

IMP_KERNEL_HAS_NUMPY = _IMP_insulinsecretion.IMP_KERNEL_HAS_NUMPY

IMP_KERNEL_HAS_TCMALLOC_HEAPCHECKER = _IMP_insulinsecretion.IMP_KERNEL_HAS_TCMALLOC_HEAPCHECKER

IMP_KERNEL_HAS_TCMALLOC_HEAPPROFILER = _IMP_insulinsecretion.IMP_KERNEL_HAS_TCMALLOC_HEAPPROFILER

IMPKERNEL_SHOW_WARNINGS = _IMP_insulinsecretion.IMPKERNEL_SHOW_WARNINGS


import sys
class _DirectorObjects(object):
    """@internal Simple class to keep references to director objects
       to prevent premature deletion."""
    def __init__(self):
        self._objects = []
    def register(self, obj):
        """Take a reference to a director object; will only work for
           refcounted C++ classes"""
        if hasattr(obj, 'get_ref_count'):
            self._objects.append(obj)
    def cleanup(self):
        """Only drop our reference and allow cleanup by Python if no other
           Python references exist (we hold 3 references: one in self._objects,
           one in x, and one in the argument list for getrefcount) *and* no
           other C++ references exist (the Python object always holds one)"""
        objs = [x for x in self._objects if sys.getrefcount(x) > 3 \
                                         or x.get_ref_count() > 1]
# Do in two steps so the references are kept until the end of the
# function (deleting references may trigger a fresh call to this method)
        self._objects = objs
    def get_object_count(self):
        """Get number of director objects (useful for testing only)"""
        return len(self._objects)
_director_objects = _DirectorObjects()

class _ostream(object):
    r"""Proxy of C++ std::ostream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def write(self, osa_buf):
        r"""write(_ostream self, char const * osa_buf)"""
        return _IMP_insulinsecretion._ostream_write(self, osa_buf)

# Register _ostream in _IMP_insulinsecretion:
_IMP_insulinsecretion._ostream_swigregister(_ostream)
IMP_C_OPEN_BINARY = _IMP_insulinsecretion.IMP_C_OPEN_BINARY

import IMP
IMP_CGAL_HAS_BOOST_FILESYSTEM = _IMP_insulinsecretion.IMP_CGAL_HAS_BOOST_FILESYSTEM

IMP_CGAL_HAS_BOOST_PROGRAMOPTIONS = _IMP_insulinsecretion.IMP_CGAL_HAS_BOOST_PROGRAMOPTIONS

IMP_CGAL_HAS_BOOST_RANDOM = _IMP_insulinsecretion.IMP_CGAL_HAS_BOOST_RANDOM

IMP_CGAL_HAS_BOOST_SYSTEM = _IMP_insulinsecretion.IMP_CGAL_HAS_BOOST_SYSTEM

IMP_CGAL_HAS_GPERFTOOLS = _IMP_insulinsecretion.IMP_CGAL_HAS_GPERFTOOLS

IMP_CGAL_HAS_NUMPY = _IMP_insulinsecretion.IMP_CGAL_HAS_NUMPY

IMPCGAL_SHOW_WARNINGS = _IMP_insulinsecretion.IMPCGAL_SHOW_WARNINGS

import IMP.cgal
IMP_ALGEBRA_HAS_IMP_CGAL = _IMP_insulinsecretion.IMP_ALGEBRA_HAS_IMP_CGAL

IMP_ALGEBRA_HAS_ANN = _IMP_insulinsecretion.IMP_ALGEBRA_HAS_ANN

IMP_ALGEBRA_HAS_BOOST_FILESYSTEM = _IMP_insulinsecretion.IMP_ALGEBRA_HAS_BOOST_FILESYSTEM

IMP_ALGEBRA_HAS_BOOST_PROGRAMOPTIONS = _IMP_insulinsecretion.IMP_ALGEBRA_HAS_BOOST_PROGRAMOPTIONS

IMP_ALGEBRA_HAS_BOOST_RANDOM = _IMP_insulinsecretion.IMP_ALGEBRA_HAS_BOOST_RANDOM

IMP_ALGEBRA_HAS_BOOST_SYSTEM = _IMP_insulinsecretion.IMP_ALGEBRA_HAS_BOOST_SYSTEM

IMP_ALGEBRA_HAS_CGAL = _IMP_insulinsecretion.IMP_ALGEBRA_HAS_CGAL

IMP_ALGEBRA_HAS_GPERFTOOLS = _IMP_insulinsecretion.IMP_ALGEBRA_HAS_GPERFTOOLS

IMP_ALGEBRA_HAS_NUMPY = _IMP_insulinsecretion.IMP_ALGEBRA_HAS_NUMPY

IMPALGEBRA_SHOW_WARNINGS = _IMP_insulinsecretion.IMPALGEBRA_SHOW_WARNINGS

import IMP.algebra
IMP_DISPLAY_HAS_IMP_CGAL = _IMP_insulinsecretion.IMP_DISPLAY_HAS_IMP_CGAL

IMP_DISPLAY_HAS_ANN = _IMP_insulinsecretion.IMP_DISPLAY_HAS_ANN

IMP_DISPLAY_HAS_BOOST_FILESYSTEM = _IMP_insulinsecretion.IMP_DISPLAY_HAS_BOOST_FILESYSTEM

IMP_DISPLAY_HAS_BOOST_PROGRAMOPTIONS = _IMP_insulinsecretion.IMP_DISPLAY_HAS_BOOST_PROGRAMOPTIONS

IMP_DISPLAY_HAS_BOOST_RANDOM = _IMP_insulinsecretion.IMP_DISPLAY_HAS_BOOST_RANDOM

IMP_DISPLAY_HAS_BOOST_SYSTEM = _IMP_insulinsecretion.IMP_DISPLAY_HAS_BOOST_SYSTEM

IMP_DISPLAY_HAS_CGAL = _IMP_insulinsecretion.IMP_DISPLAY_HAS_CGAL

IMP_DISPLAY_HAS_GPERFTOOLS = _IMP_insulinsecretion.IMP_DISPLAY_HAS_GPERFTOOLS

IMP_DISPLAY_HAS_NUMPY = _IMP_insulinsecretion.IMP_DISPLAY_HAS_NUMPY

IMPDISPLAY_SHOW_WARNINGS = _IMP_insulinsecretion.IMPDISPLAY_SHOW_WARNINGS

import IMP.display
IMP_SCORE_FUNCTOR_HAS_IMP_CGAL = _IMP_insulinsecretion.IMP_SCORE_FUNCTOR_HAS_IMP_CGAL

IMP_SCORE_FUNCTOR_HAS_ANN = _IMP_insulinsecretion.IMP_SCORE_FUNCTOR_HAS_ANN

IMP_SCORE_FUNCTOR_HAS_BOOST_FILESYSTEM = _IMP_insulinsecretion.IMP_SCORE_FUNCTOR_HAS_BOOST_FILESYSTEM

IMP_SCORE_FUNCTOR_HAS_BOOST_PROGRAMOPTIONS = _IMP_insulinsecretion.IMP_SCORE_FUNCTOR_HAS_BOOST_PROGRAMOPTIONS

IMP_SCORE_FUNCTOR_HAS_BOOST_RANDOM = _IMP_insulinsecretion.IMP_SCORE_FUNCTOR_HAS_BOOST_RANDOM

IMP_SCORE_FUNCTOR_HAS_BOOST_SYSTEM = _IMP_insulinsecretion.IMP_SCORE_FUNCTOR_HAS_BOOST_SYSTEM

IMP_SCORE_FUNCTOR_HAS_CGAL = _IMP_insulinsecretion.IMP_SCORE_FUNCTOR_HAS_CGAL

IMP_SCORE_FUNCTOR_HAS_GPERFTOOLS = _IMP_insulinsecretion.IMP_SCORE_FUNCTOR_HAS_GPERFTOOLS

IMP_SCORE_FUNCTOR_HAS_HDF5 = _IMP_insulinsecretion.IMP_SCORE_FUNCTOR_HAS_HDF5

IMP_SCORE_FUNCTOR_HAS_NUMPY = _IMP_insulinsecretion.IMP_SCORE_FUNCTOR_HAS_NUMPY

IMPSCOREFUNCTOR_SHOW_WARNINGS = _IMP_insulinsecretion.IMPSCOREFUNCTOR_SHOW_WARNINGS

import IMP.score_functor
IMP_CORE_HAS_IMP_CGAL = _IMP_insulinsecretion.IMP_CORE_HAS_IMP_CGAL

IMP_CORE_HAS_IMP_KERNEL = _IMP_insulinsecretion.IMP_CORE_HAS_IMP_KERNEL

IMP_CORE_HAS_ANN = _IMP_insulinsecretion.IMP_CORE_HAS_ANN

IMP_CORE_HAS_BOOST_FILESYSTEM = _IMP_insulinsecretion.IMP_CORE_HAS_BOOST_FILESYSTEM

IMP_CORE_HAS_BOOST_PROGRAMOPTIONS = _IMP_insulinsecretion.IMP_CORE_HAS_BOOST_PROGRAMOPTIONS

IMP_CORE_HAS_BOOST_RANDOM = _IMP_insulinsecretion.IMP_CORE_HAS_BOOST_RANDOM

IMP_CORE_HAS_BOOST_SYSTEM = _IMP_insulinsecretion.IMP_CORE_HAS_BOOST_SYSTEM

IMP_CORE_HAS_CGAL = _IMP_insulinsecretion.IMP_CORE_HAS_CGAL

IMP_CORE_HAS_GPERFTOOLS = _IMP_insulinsecretion.IMP_CORE_HAS_GPERFTOOLS

IMP_CORE_HAS_HDF5 = _IMP_insulinsecretion.IMP_CORE_HAS_HDF5

IMP_CORE_HAS_NUMPY = _IMP_insulinsecretion.IMP_CORE_HAS_NUMPY

IMPCORE_SHOW_WARNINGS = _IMP_insulinsecretion.IMPCORE_SHOW_WARNINGS

import IMP.core
IMP_CONTAINER_HAS_IMP_ALGEBRA = _IMP_insulinsecretion.IMP_CONTAINER_HAS_IMP_ALGEBRA

IMP_CONTAINER_HAS_IMP_CGAL = _IMP_insulinsecretion.IMP_CONTAINER_HAS_IMP_CGAL

IMP_CONTAINER_HAS_IMP_DISPLAY = _IMP_insulinsecretion.IMP_CONTAINER_HAS_IMP_DISPLAY

IMP_CONTAINER_HAS_IMP_KERNEL = _IMP_insulinsecretion.IMP_CONTAINER_HAS_IMP_KERNEL

IMP_CONTAINER_HAS_IMP_SCORE_FUNCTOR = _IMP_insulinsecretion.IMP_CONTAINER_HAS_IMP_SCORE_FUNCTOR

IMP_CONTAINER_HAS_ANN = _IMP_insulinsecretion.IMP_CONTAINER_HAS_ANN

IMP_CONTAINER_HAS_BOOST_FILESYSTEM = _IMP_insulinsecretion.IMP_CONTAINER_HAS_BOOST_FILESYSTEM

IMP_CONTAINER_HAS_BOOST_PROGRAMOPTIONS = _IMP_insulinsecretion.IMP_CONTAINER_HAS_BOOST_PROGRAMOPTIONS

IMP_CONTAINER_HAS_BOOST_RANDOM = _IMP_insulinsecretion.IMP_CONTAINER_HAS_BOOST_RANDOM

IMP_CONTAINER_HAS_BOOST_SYSTEM = _IMP_insulinsecretion.IMP_CONTAINER_HAS_BOOST_SYSTEM

IMP_CONTAINER_HAS_CGAL = _IMP_insulinsecretion.IMP_CONTAINER_HAS_CGAL

IMP_CONTAINER_HAS_GPERFTOOLS = _IMP_insulinsecretion.IMP_CONTAINER_HAS_GPERFTOOLS

IMP_CONTAINER_HAS_HDF5 = _IMP_insulinsecretion.IMP_CONTAINER_HAS_HDF5

IMP_CONTAINER_HAS_NUMPY = _IMP_insulinsecretion.IMP_CONTAINER_HAS_NUMPY

IMP_CONTAINER_HAS_PYTHON_IHM = _IMP_insulinsecretion.IMP_CONTAINER_HAS_PYTHON_IHM

IMP_CONTAINER_HAS_GOOGLE_DENSE_HASH_MAP = _IMP_insulinsecretion.IMP_CONTAINER_HAS_GOOGLE_DENSE_HASH_MAP

IMP_CONTAINER_HAS_ROBIN_MAP = _IMP_insulinsecretion.IMP_CONTAINER_HAS_ROBIN_MAP

IMPCONTAINER_SHOW_WARNINGS = _IMP_insulinsecretion.IMPCONTAINER_SHOW_WARNINGS

import IMP.container
IMP_INSULINSECRETION_HAS_IMP_ALGEBRA = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_IMP_ALGEBRA

IMP_INSULINSECRETION_HAS_IMP_CGAL = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_IMP_CGAL

IMP_INSULINSECRETION_HAS_IMP_DISPLAY = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_IMP_DISPLAY

IMP_INSULINSECRETION_HAS_IMP_KERNEL = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_IMP_KERNEL

IMP_INSULINSECRETION_HAS_IMP_SCORE_FUNCTOR = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_IMP_SCORE_FUNCTOR

IMP_INSULINSECRETION_HAS_ANN = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_ANN

IMP_INSULINSECRETION_HAS_BOOST_FILESYSTEM = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_BOOST_FILESYSTEM

IMP_INSULINSECRETION_HAS_BOOST_PROGRAMOPTIONS = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_BOOST_PROGRAMOPTIONS

IMP_INSULINSECRETION_HAS_BOOST_RANDOM = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_BOOST_RANDOM

IMP_INSULINSECRETION_HAS_BOOST_SYSTEM = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_BOOST_SYSTEM

IMP_INSULINSECRETION_HAS_CGAL = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_CGAL

IMP_INSULINSECRETION_HAS_GPERFTOOLS = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_GPERFTOOLS

IMP_INSULINSECRETION_HAS_HDF5 = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_HDF5

IMP_INSULINSECRETION_HAS_NUMPY = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_NUMPY

IMP_INSULINSECRETION_HAS_PYTHON_IHM = _IMP_insulinsecretion.IMP_INSULINSECRETION_HAS_PYTHON_IHM

IMPINSULINSECRETION_SHOW_WARNINGS = _IMP_insulinsecretion.IMPINSULINSECRETION_SHOW_WARNINGS


_object_types.append("VesicleTraffickingSingletonScore")


def _object_cast_to_VesicleTraffickingSingletonScore(o):
    r"""_object_cast_to_VesicleTraffickingSingletonScore(Object o) -> VesicleTraffickingSingletonScore"""
    return _IMP_insulinsecretion._object_cast_to_VesicleTraffickingSingletonScore(o)

_object_types.append("InsulinSecretionOptimizerState")


def _object_cast_to_InsulinSecretionOptimizerState(o):
    r"""_object_cast_to_InsulinSecretionOptimizerState(Object o) -> InsulinSecretionOptimizerState"""
    return _IMP_insulinsecretion._object_cast_to_InsulinSecretionOptimizerState(o)

_object_types.append("CaChannelOpeningOptimizerState")


def _object_cast_to_CaChannelOpeningOptimizerState(o):
    r"""_object_cast_to_CaChannelOpeningOptimizerState(Object o) -> CaChannelOpeningOptimizerState"""
    return _IMP_insulinsecretion._object_cast_to_CaChannelOpeningOptimizerState(o)

_object_types.append("VesicleDockingOptimizerState")


def _object_cast_to_VesicleDockingOptimizerState(o):
    r"""_object_cast_to_VesicleDockingOptimizerState(Object o) -> VesicleDockingOptimizerState"""
    return _IMP_insulinsecretion._object_cast_to_VesicleDockingOptimizerState(o)

_object_types.append("RadialDistributionFunctionSingletonScore")


def _object_cast_to_RadialDistributionFunctionSingletonScore(o):
    r"""_object_cast_to_RadialDistributionFunctionSingletonScore(Object o) -> RadialDistributionFunctionSingletonScore"""
    return _IMP_insulinsecretion._object_cast_to_RadialDistributionFunctionSingletonScore(o)

def SecretionCounterDecorators(l=[]):
    return [SecretionCounterDecorator(x) for x in l]
_plural_types.append("SecretionCounterDecorators")


_value_types.append("SecretionCounterDecorator")


def MaturationStateDecorators(l=[]):
    return [MaturationStateDecorator(x) for x in l]
_plural_types.append("MaturationStateDecorators")


_value_types.append("MaturationStateDecorator")


def DockingStateDecorators(l=[]):
    return [DockingStateDecorator(x) for x in l]
_plural_types.append("DockingStateDecorators")


_value_types.append("DockingStateDecorator")


def CaChannelStateDecorators(l=[]):
    return [CaChannelStateDecorator(x) for x in l]
_plural_types.append("CaChannelStateDecorators")


_value_types.append("CaChannelStateDecorator")

class VesicleTraffickingSingletonScore(IMP.SingletonScore):
    r"""Proxy of C++ IMP::insulinsecretion::VesicleTraffickingSingletonScore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, center, k):
        r"""__init__(VesicleTraffickingSingletonScore self, Vector3D center, double k) -> VesicleTraffickingSingletonScore"""
        _IMP_insulinsecretion.VesicleTraffickingSingletonScore_swiginit(self, _IMP_insulinsecretion.new_VesicleTraffickingSingletonScore(center, k))

    def set_k(self, k):
        r"""set_k(VesicleTraffickingSingletonScore self, double k)"""
        return _IMP_insulinsecretion.VesicleTraffickingSingletonScore_set_k(self, k)

    def get_k(self):
        r"""get_k(VesicleTraffickingSingletonScore self) -> double"""
        return _IMP_insulinsecretion.VesicleTraffickingSingletonScore_get_k(self)

    def do_get_inputs(self, m, pis):
        r"""do_get_inputs(VesicleTraffickingSingletonScore self, Model m, IMP::ParticleIndexes const & pis) -> IMP::ModelObjectsTemp"""
        return _IMP_insulinsecretion.VesicleTraffickingSingletonScore_do_get_inputs(self, m, pis)

    def get_version_info(self):
        r"""get_version_info(VesicleTraffickingSingletonScore self) -> VersionInfo"""
        return _IMP_insulinsecretion.VesicleTraffickingSingletonScore_get_version_info(self)
    __swig_destroy__ = _IMP_insulinsecretion.delete_VesicleTraffickingSingletonScore

    def __str__(self):
        r"""__str__(VesicleTraffickingSingletonScore self) -> std::string"""
        return _IMP_insulinsecretion.VesicleTraffickingSingletonScore___str__(self)

    def __repr__(self):
        r"""__repr__(VesicleTraffickingSingletonScore self) -> std::string"""
        return _IMP_insulinsecretion.VesicleTraffickingSingletonScore___repr__(self)

    @staticmethod
    def get_from(o):
       return _object_cast_to_VesicleTraffickingSingletonScore(o)


# Register VesicleTraffickingSingletonScore in _IMP_insulinsecretion:
_IMP_insulinsecretion.VesicleTraffickingSingletonScore_swigregister(VesicleTraffickingSingletonScore)
class InsulinSecretionOptimizerState(IMP.OptimizerState):
    r"""Proxy of C++ IMP::insulinsecretion::InsulinSecretionOptimizerState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, m, vesicles, nucleus_sphere, ready_state, cut_off, periodicity=1):
        r"""__init__(InsulinSecretionOptimizerState self, Model m, _ParticleIndexesAdaptor vesicles, Sphere3D nucleus_sphere, int ready_state, double cut_off, unsigned int periodicity=1) -> InsulinSecretionOptimizerState"""
        _IMP_insulinsecretion.InsulinSecretionOptimizerState_swiginit(self, _IMP_insulinsecretion.new_InsulinSecretionOptimizerState(m, vesicles, nucleus_sphere, ready_state, cut_off, periodicity))

    def set_cut_off(self, cut_off):
        r"""set_cut_off(InsulinSecretionOptimizerState self, double cut_off)"""
        return _IMP_insulinsecretion.InsulinSecretionOptimizerState_set_cut_off(self, cut_off)

    def get_cut_off(self):
        r"""get_cut_off(InsulinSecretionOptimizerState self) -> double"""
        return _IMP_insulinsecretion.InsulinSecretionOptimizerState_get_cut_off(self)

    def set_vesicles(self, vesicles):
        r"""set_vesicles(InsulinSecretionOptimizerState self, IMP::Particles const & vesicles)"""
        return _IMP_insulinsecretion.InsulinSecretionOptimizerState_set_vesicles(self, vesicles)

    def get_version_info(self):
        r"""get_version_info(InsulinSecretionOptimizerState self) -> VersionInfo"""
        return _IMP_insulinsecretion.InsulinSecretionOptimizerState_get_version_info(self)
    __swig_destroy__ = _IMP_insulinsecretion.delete_InsulinSecretionOptimizerState

    def __str__(self):
        r"""__str__(InsulinSecretionOptimizerState self) -> std::string"""
        return _IMP_insulinsecretion.InsulinSecretionOptimizerState___str__(self)

    def __repr__(self):
        r"""__repr__(InsulinSecretionOptimizerState self) -> std::string"""
        return _IMP_insulinsecretion.InsulinSecretionOptimizerState___repr__(self)

    @staticmethod
    def get_from(o):
       return _object_cast_to_InsulinSecretionOptimizerState(o)


# Register InsulinSecretionOptimizerState in _IMP_insulinsecretion:
_IMP_insulinsecretion.InsulinSecretionOptimizerState_swigregister(InsulinSecretionOptimizerState)
class CaChannelOpeningOptimizerState(IMP.OptimizerState):
    r"""Proxy of C++ IMP::insulinsecretion::CaChannelOpeningOptimizerState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, m, cachannel, oscillation, troughn, peakn, periodicity=1):
        r"""__init__(CaChannelOpeningOptimizerState self, Model m, _ParticleIndexesAdaptor cachannel, int oscillation, int troughn, int peakn, unsigned int periodicity=1) -> CaChannelOpeningOptimizerState"""
        _IMP_insulinsecretion.CaChannelOpeningOptimizerState_swiginit(self, _IMP_insulinsecretion.new_CaChannelOpeningOptimizerState(m, cachannel, oscillation, troughn, peakn, periodicity))

    def set_cachannel(self, cachannel):
        r"""set_cachannel(CaChannelOpeningOptimizerState self, IMP::Particles const & cachannel)"""
        return _IMP_insulinsecretion.CaChannelOpeningOptimizerState_set_cachannel(self, cachannel)

    def get_version_info(self):
        r"""get_version_info(CaChannelOpeningOptimizerState self) -> VersionInfo"""
        return _IMP_insulinsecretion.CaChannelOpeningOptimizerState_get_version_info(self)
    __swig_destroy__ = _IMP_insulinsecretion.delete_CaChannelOpeningOptimizerState

    def __str__(self):
        r"""__str__(CaChannelOpeningOptimizerState self) -> std::string"""
        return _IMP_insulinsecretion.CaChannelOpeningOptimizerState___str__(self)

    def __repr__(self):
        r"""__repr__(CaChannelOpeningOptimizerState self) -> std::string"""
        return _IMP_insulinsecretion.CaChannelOpeningOptimizerState___repr__(self)

    @staticmethod
    def get_from(o):
       return _object_cast_to_CaChannelOpeningOptimizerState(o)


# Register CaChannelOpeningOptimizerState in _IMP_insulinsecretion:
_IMP_insulinsecretion.CaChannelOpeningOptimizerState_swigregister(CaChannelOpeningOptimizerState)
class VesicleDockingOptimizerState(IMP.OptimizerState):
    r"""Proxy of C++ IMP::insulinsecretion::VesicleDockingOptimizerState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, vesicles_container, cachannel_container, contact_range, slack, ready_state, periodicity=1):
        r"""__init__(VesicleDockingOptimizerState self, _SingletonContainerAdaptor vesicles_container, _SingletonContainerAdaptor cachannel_container, double contact_range, double slack, int ready_state, unsigned int periodicity=1) -> VesicleDockingOptimizerState"""
        _IMP_insulinsecretion.VesicleDockingOptimizerState_swiginit(self, _IMP_insulinsecretion.new_VesicleDockingOptimizerState(vesicles_container, cachannel_container, contact_range, slack, ready_state, periodicity))

    def get_version_info(self):
        r"""get_version_info(VesicleDockingOptimizerState self) -> VersionInfo"""
        return _IMP_insulinsecretion.VesicleDockingOptimizerState_get_version_info(self)
    __swig_destroy__ = _IMP_insulinsecretion.delete_VesicleDockingOptimizerState

    def __str__(self):
        r"""__str__(VesicleDockingOptimizerState self) -> std::string"""
        return _IMP_insulinsecretion.VesicleDockingOptimizerState___str__(self)

    def __repr__(self):
        r"""__repr__(VesicleDockingOptimizerState self) -> std::string"""
        return _IMP_insulinsecretion.VesicleDockingOptimizerState___repr__(self)

    @staticmethod
    def get_from(o):
       return _object_cast_to_VesicleDockingOptimizerState(o)


# Register VesicleDockingOptimizerState in _IMP_insulinsecretion:
_IMP_insulinsecretion.VesicleDockingOptimizerState_swigregister(VesicleDockingOptimizerState)
class RadialDistributionFunctionSingletonScore(IMP.SingletonScore):
    r"""Proxy of C++ IMP::insulinsecretion::RadialDistributionFunctionSingletonScore class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, cell_sphere, nucleus_sphere, poly_param, k):
        r"""__init__(RadialDistributionFunctionSingletonScore self, Sphere3D cell_sphere, Sphere3D nucleus_sphere, IMP::Floats poly_param, double k) -> RadialDistributionFunctionSingletonScore"""
        _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_swiginit(self, _IMP_insulinsecretion.new_RadialDistributionFunctionSingletonScore(cell_sphere, nucleus_sphere, poly_param, k))

    def set_k(self, k):
        r"""set_k(RadialDistributionFunctionSingletonScore self, double k)"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_set_k(self, k)

    def get_k(self):
        r"""get_k(RadialDistributionFunctionSingletonScore self) -> double"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_get_k(self)

    def set_cell_sphere(self, cell_sphere):
        r"""set_cell_sphere(RadialDistributionFunctionSingletonScore self, Sphere3D cell_sphere)"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_set_cell_sphere(self, cell_sphere)

    def get_cell_sphere(self):
        r"""get_cell_sphere(RadialDistributionFunctionSingletonScore self) -> Sphere3D"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_get_cell_sphere(self)

    def set_nucleus_sphere(self, nucleus_sphere):
        r"""set_nucleus_sphere(RadialDistributionFunctionSingletonScore self, Sphere3D nucleus_sphere)"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_set_nucleus_sphere(self, nucleus_sphere)

    def get_nucleus_sphere(self):
        r"""get_nucleus_sphere(RadialDistributionFunctionSingletonScore self) -> Sphere3D"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_get_nucleus_sphere(self)

    def set_poly_param(self, poly_param):
        r"""set_poly_param(RadialDistributionFunctionSingletonScore self, IMP::Floats poly_param)"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_set_poly_param(self, poly_param)

    def get_poly_param(self):
        r"""get_poly_param(RadialDistributionFunctionSingletonScore self) -> IMP::Floats"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_get_poly_param(self)

    def do_get_inputs(self, m, pis):
        r"""do_get_inputs(RadialDistributionFunctionSingletonScore self, Model m, IMP::ParticleIndexes const & pis) -> IMP::ModelObjectsTemp"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_do_get_inputs(self, m, pis)

    def get_version_info(self):
        r"""get_version_info(RadialDistributionFunctionSingletonScore self) -> VersionInfo"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_get_version_info(self)
    __swig_destroy__ = _IMP_insulinsecretion.delete_RadialDistributionFunctionSingletonScore

    def __str__(self):
        r"""__str__(RadialDistributionFunctionSingletonScore self) -> std::string"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore___str__(self)

    def __repr__(self):
        r"""__repr__(RadialDistributionFunctionSingletonScore self) -> std::string"""
        return _IMP_insulinsecretion.RadialDistributionFunctionSingletonScore___repr__(self)

    @staticmethod
    def get_from(o):
       return _object_cast_to_RadialDistributionFunctionSingletonScore(o)


# Register RadialDistributionFunctionSingletonScore in _IMP_insulinsecretion:
_IMP_insulinsecretion.RadialDistributionFunctionSingletonScore_swigregister(RadialDistributionFunctionSingletonScore)
class SecretionCounterDecorator(IMP.Decorator):
    r"""Proxy of C++ IMP::insulinsecretion::SecretionCounterDecorator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def get_secretion(self):
        r"""get_secretion(SecretionCounterDecorator self) -> IMP::Int"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_get_secretion(self)

    def set_secretion(self, d):
        r"""set_secretion(SecretionCounterDecorator self, IMP::Int d)"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_set_secretion(self, d)

    def __init__(self, *args):
        r"""
        __init__(SecretionCounterDecorator self) -> SecretionCounterDecorator
        __init__(SecretionCounterDecorator self, Model m, ParticleIndex id) -> SecretionCounterDecorator
        __init__(SecretionCounterDecorator self, _ParticleAdaptor d) -> SecretionCounterDecorator
        """
        _IMP_insulinsecretion.SecretionCounterDecorator_swiginit(self, _IMP_insulinsecretion.new_SecretionCounterDecorator(*args))

    @staticmethod
    def get_is_setup(*args):
        r"""
        get_is_setup(Model m, ParticleIndex pi) -> bool
        get_is_setup(_ParticleAdaptor p) -> bool
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator_get_is_setup(*args)

    def show(self, *args):
        r"""show(SecretionCounterDecorator self, _ostream out=std::cout)"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_show(self, *args)

    @staticmethod
    def setup_particle(*args):
        r"""
        setup_particle(Model m, ParticleIndex pi, IMP::Int secretion) -> SecretionCounterDecorator
        setup_particle(_ParticleAdaptor pa, IMP::Int secretion) -> SecretionCounterDecorator
        setup_particle(Model m, ParticleIndex pi, SecretionCounterDecorator other) -> SecretionCounterDecorator
        setup_particle(_ParticleAdaptor pa, SecretionCounterDecorator other) -> SecretionCounterDecorator
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator_setup_particle(*args)

    @staticmethod
    def get_secretion_key():
        r"""get_secretion_key() -> IntKey"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_get_secretion_key()

    def add_attribute(self, *args):
        r"""
        add_attribute(SecretionCounterDecorator self, FloatKey k, IMP::Float v, bool opt)
        add_attribute(SecretionCounterDecorator self, FloatKey a0, IMP::Float a1)
        add_attribute(SecretionCounterDecorator self, IntKey a0, IMP::Int a1)
        add_attribute(SecretionCounterDecorator self, FloatsKey a0, IMP::Floats a1)
        add_attribute(SecretionCounterDecorator self, IntsKey a0, IMP::Ints a1)
        add_attribute(SecretionCounterDecorator self, StringKey a0, IMP::String a1)
        add_attribute(SecretionCounterDecorator self, ParticleIndexKey a0, Particle a1)
        add_attribute(SecretionCounterDecorator self, ObjectKey a0, Object a1)
        add_attribute(SecretionCounterDecorator self, SparseFloatKey a0, IMP::Float a1)
        add_attribute(SecretionCounterDecorator self, SparseIntKey a0, IMP::Int a1)
        add_attribute(SecretionCounterDecorator self, SparseStringKey a0, IMP::String a1)
        add_attribute(SecretionCounterDecorator self, SparseParticleIndexKey a0, ParticleIndex a1)
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator_add_attribute(self, *args)

    def get_value(self, *args):
        r"""
        get_value(SecretionCounterDecorator self, FloatKey a0) -> IMP::Float
        get_value(SecretionCounterDecorator self, IntKey a0) -> IMP::Int
        get_value(SecretionCounterDecorator self, FloatsKey a0) -> IMP::Floats
        get_value(SecretionCounterDecorator self, IntsKey a0) -> IMP::Ints
        get_value(SecretionCounterDecorator self, StringKey a0) -> IMP::String
        get_value(SecretionCounterDecorator self, ParticleIndexKey a0) -> Particle
        get_value(SecretionCounterDecorator self, ObjectKey a0) -> Object
        get_value(SecretionCounterDecorator self, SparseFloatKey a0) -> IMP::Float
        get_value(SecretionCounterDecorator self, SparseIntKey a0) -> IMP::Int
        get_value(SecretionCounterDecorator self, SparseStringKey a0) -> IMP::String
        get_value(SecretionCounterDecorator self, SparseParticleIndexKey a0) -> ParticleIndex
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator_get_value(self, *args)

    def set_value(self, *args):
        r"""
        set_value(SecretionCounterDecorator self, FloatKey a0, IMP::Float a1)
        set_value(SecretionCounterDecorator self, IntKey a0, IMP::Int a1)
        set_value(SecretionCounterDecorator self, FloatsKey a0, IMP::Floats a1)
        set_value(SecretionCounterDecorator self, IntsKey a0, IMP::Ints a1)
        set_value(SecretionCounterDecorator self, StringKey a0, IMP::String a1)
        set_value(SecretionCounterDecorator self, ParticleIndexKey a0, Particle a1)
        set_value(SecretionCounterDecorator self, ObjectKey a0, Object a1)
        set_value(SecretionCounterDecorator self, SparseFloatKey a0, IMP::Float a1)
        set_value(SecretionCounterDecorator self, SparseIntKey a0, IMP::Int a1)
        set_value(SecretionCounterDecorator self, SparseStringKey a0, IMP::String a1)
        set_value(SecretionCounterDecorator self, SparseParticleIndexKey a0, ParticleIndex a1)
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator_set_value(self, *args)

    def remove_attribute(self, *args):
        r"""
        remove_attribute(SecretionCounterDecorator self, FloatKey a0)
        remove_attribute(SecretionCounterDecorator self, IntKey a0)
        remove_attribute(SecretionCounterDecorator self, FloatsKey a0)
        remove_attribute(SecretionCounterDecorator self, IntsKey a0)
        remove_attribute(SecretionCounterDecorator self, StringKey a0)
        remove_attribute(SecretionCounterDecorator self, ParticleIndexKey a0)
        remove_attribute(SecretionCounterDecorator self, ObjectKey a0)
        remove_attribute(SecretionCounterDecorator self, SparseFloatKey a0)
        remove_attribute(SecretionCounterDecorator self, SparseIntKey a0)
        remove_attribute(SecretionCounterDecorator self, SparseStringKey a0)
        remove_attribute(SecretionCounterDecorator self, SparseParticleIndexKey a0)
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator_remove_attribute(self, *args)

    def has_attribute(self, *args):
        r"""
        has_attribute(SecretionCounterDecorator self, FloatKey a0) -> bool
        has_attribute(SecretionCounterDecorator self, IntKey a0) -> bool
        has_attribute(SecretionCounterDecorator self, FloatsKey a0) -> bool
        has_attribute(SecretionCounterDecorator self, IntsKey a0) -> bool
        has_attribute(SecretionCounterDecorator self, StringKey a0) -> bool
        has_attribute(SecretionCounterDecorator self, ParticleIndexKey a0) -> bool
        has_attribute(SecretionCounterDecorator self, ObjectKey a0) -> bool
        has_attribute(SecretionCounterDecorator self, SparseFloatKey a0) -> bool
        has_attribute(SecretionCounterDecorator self, SparseIntKey a0) -> bool
        has_attribute(SecretionCounterDecorator self, SparseStringKey a0) -> bool
        has_attribute(SecretionCounterDecorator self, SparseParticleIndexKey a0) -> bool
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator_has_attribute(self, *args)

    def get_derivative(self, a0):
        r"""get_derivative(SecretionCounterDecorator self, FloatKey a0) -> double"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_get_derivative(self, a0)

    def get_name(self):
        r"""get_name(SecretionCounterDecorator self) -> std::string"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_get_name(self)

    def clear_caches(self):
        r"""clear_caches(SecretionCounterDecorator self)"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_clear_caches(self)

    def set_name(self, a0):
        r"""set_name(SecretionCounterDecorator self, std::string a0)"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_set_name(self, a0)

    def set_check_level(self, a0):
        r"""set_check_level(SecretionCounterDecorator self, IMP::CheckLevel a0)"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_set_check_level(self, a0)

    def add_to_derivative(self, a0, a1, a2):
        r"""add_to_derivative(SecretionCounterDecorator self, FloatKey a0, double a1, DerivativeAccumulator a2)"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_add_to_derivative(self, a0, a1, a2)

    def set_is_optimized(self, a0, a1):
        r"""set_is_optimized(SecretionCounterDecorator self, FloatKey a0, bool a1)"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_set_is_optimized(self, a0, a1)

    def get_is_optimized(self, a0):
        r"""get_is_optimized(SecretionCounterDecorator self, FloatKey a0) -> bool"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_get_is_optimized(self, a0)

    def get_check_level(self):
        r"""get_check_level(SecretionCounterDecorator self) -> IMP::CheckLevel"""
        return _IMP_insulinsecretion.SecretionCounterDecorator_get_check_level(self)

    def __eq__(self, *args):
        r"""
        __eq__(SecretionCounterDecorator self, SecretionCounterDecorator o) -> bool
        __eq__(SecretionCounterDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(SecretionCounterDecorator self, SecretionCounterDecorator o) -> bool
        __ne__(SecretionCounterDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator___ne__(self, *args)

    def __le__(self, *args):
        r"""
        __le__(SecretionCounterDecorator self, SecretionCounterDecorator o) -> bool
        __le__(SecretionCounterDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator___le__(self, *args)

    def __lt__(self, *args):
        r"""
        __lt__(SecretionCounterDecorator self, SecretionCounterDecorator o) -> bool
        __lt__(SecretionCounterDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator___lt__(self, *args)

    def __ge__(self, *args):
        r"""
        __ge__(SecretionCounterDecorator self, SecretionCounterDecorator o) -> bool
        __ge__(SecretionCounterDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator___ge__(self, *args)

    def __gt__(self, *args):
        r"""
        __gt__(SecretionCounterDecorator self, SecretionCounterDecorator o) -> bool
        __gt__(SecretionCounterDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.SecretionCounterDecorator___gt__(self, *args)

    def __hash__(self):
        r"""__hash__(SecretionCounterDecorator self) -> std::size_t"""
        return _IMP_insulinsecretion.SecretionCounterDecorator___hash__(self)

    def __str__(self):
        r"""__str__(SecretionCounterDecorator self) -> std::string"""
        return _IMP_insulinsecretion.SecretionCounterDecorator___str__(self)

    def __repr__(self):
        r"""__repr__(SecretionCounterDecorator self) -> std::string"""
        return _IMP_insulinsecretion.SecretionCounterDecorator___repr__(self)

    def _get_as_binary(self):
        r"""_get_as_binary(SecretionCounterDecorator self) -> PyObject *"""
        return _IMP_insulinsecretion.SecretionCounterDecorator__get_as_binary(self)

    def _set_from_binary(self, p):
        r"""_set_from_binary(SecretionCounterDecorator self, PyObject * p)"""
        return _IMP_insulinsecretion.SecretionCounterDecorator__set_from_binary(self, p)

    def __getstate__(self):
        p = self._get_as_binary()
        if len(self.__dict__) > 1:
            d = self.__dict__.copy()
            del d['this']
            p = (d, p)
        return p

    def __setstate__(self, p):
        if not hasattr(self, 'this'):
            self.__init__()
        if isinstance(p, tuple):
            d, p = p
            self.__dict__.update(d)
        return self._set_from_binary(p)

    __swig_destroy__ = _IMP_insulinsecretion.delete_SecretionCounterDecorator

# Register SecretionCounterDecorator in _IMP_insulinsecretion:
_IMP_insulinsecretion.SecretionCounterDecorator_swigregister(SecretionCounterDecorator)
class MaturationStateDecorator(IMP.Decorator):
    r"""Proxy of C++ IMP::insulinsecretion::MaturationStateDecorator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def get_state(self):
        r"""get_state(MaturationStateDecorator self) -> IMP::Int"""
        return _IMP_insulinsecretion.MaturationStateDecorator_get_state(self)

    def set_state(self, d):
        r"""set_state(MaturationStateDecorator self, IMP::Int d)"""
        return _IMP_insulinsecretion.MaturationStateDecorator_set_state(self, d)

    def __init__(self, *args):
        r"""
        __init__(MaturationStateDecorator self) -> MaturationStateDecorator
        __init__(MaturationStateDecorator self, Model m, ParticleIndex id) -> MaturationStateDecorator
        __init__(MaturationStateDecorator self, _ParticleAdaptor d) -> MaturationStateDecorator
        """
        _IMP_insulinsecretion.MaturationStateDecorator_swiginit(self, _IMP_insulinsecretion.new_MaturationStateDecorator(*args))

    @staticmethod
    def get_is_setup(*args):
        r"""
        get_is_setup(Model m, ParticleIndex pi) -> bool
        get_is_setup(_ParticleAdaptor p) -> bool
        """
        return _IMP_insulinsecretion.MaturationStateDecorator_get_is_setup(*args)

    def show(self, *args):
        r"""show(MaturationStateDecorator self, _ostream out=std::cout)"""
        return _IMP_insulinsecretion.MaturationStateDecorator_show(self, *args)

    @staticmethod
    def setup_particle(*args):
        r"""
        setup_particle(Model m, ParticleIndex pi, IMP::Int state) -> MaturationStateDecorator
        setup_particle(_ParticleAdaptor pa, IMP::Int state) -> MaturationStateDecorator
        setup_particle(Model m, ParticleIndex pi, MaturationStateDecorator other) -> MaturationStateDecorator
        setup_particle(_ParticleAdaptor pa, MaturationStateDecorator other) -> MaturationStateDecorator
        """
        return _IMP_insulinsecretion.MaturationStateDecorator_setup_particle(*args)

    @staticmethod
    def get_state_key():
        r"""get_state_key() -> IntKey"""
        return _IMP_insulinsecretion.MaturationStateDecorator_get_state_key()

    def add_attribute(self, *args):
        r"""
        add_attribute(MaturationStateDecorator self, FloatKey k, IMP::Float v, bool opt)
        add_attribute(MaturationStateDecorator self, FloatKey a0, IMP::Float a1)
        add_attribute(MaturationStateDecorator self, IntKey a0, IMP::Int a1)
        add_attribute(MaturationStateDecorator self, FloatsKey a0, IMP::Floats a1)
        add_attribute(MaturationStateDecorator self, IntsKey a0, IMP::Ints a1)
        add_attribute(MaturationStateDecorator self, StringKey a0, IMP::String a1)
        add_attribute(MaturationStateDecorator self, ParticleIndexKey a0, Particle a1)
        add_attribute(MaturationStateDecorator self, ObjectKey a0, Object a1)
        add_attribute(MaturationStateDecorator self, SparseFloatKey a0, IMP::Float a1)
        add_attribute(MaturationStateDecorator self, SparseIntKey a0, IMP::Int a1)
        add_attribute(MaturationStateDecorator self, SparseStringKey a0, IMP::String a1)
        add_attribute(MaturationStateDecorator self, SparseParticleIndexKey a0, ParticleIndex a1)
        """
        return _IMP_insulinsecretion.MaturationStateDecorator_add_attribute(self, *args)

    def get_value(self, *args):
        r"""
        get_value(MaturationStateDecorator self, FloatKey a0) -> IMP::Float
        get_value(MaturationStateDecorator self, IntKey a0) -> IMP::Int
        get_value(MaturationStateDecorator self, FloatsKey a0) -> IMP::Floats
        get_value(MaturationStateDecorator self, IntsKey a0) -> IMP::Ints
        get_value(MaturationStateDecorator self, StringKey a0) -> IMP::String
        get_value(MaturationStateDecorator self, ParticleIndexKey a0) -> Particle
        get_value(MaturationStateDecorator self, ObjectKey a0) -> Object
        get_value(MaturationStateDecorator self, SparseFloatKey a0) -> IMP::Float
        get_value(MaturationStateDecorator self, SparseIntKey a0) -> IMP::Int
        get_value(MaturationStateDecorator self, SparseStringKey a0) -> IMP::String
        get_value(MaturationStateDecorator self, SparseParticleIndexKey a0) -> ParticleIndex
        """
        return _IMP_insulinsecretion.MaturationStateDecorator_get_value(self, *args)

    def set_value(self, *args):
        r"""
        set_value(MaturationStateDecorator self, FloatKey a0, IMP::Float a1)
        set_value(MaturationStateDecorator self, IntKey a0, IMP::Int a1)
        set_value(MaturationStateDecorator self, FloatsKey a0, IMP::Floats a1)
        set_value(MaturationStateDecorator self, IntsKey a0, IMP::Ints a1)
        set_value(MaturationStateDecorator self, StringKey a0, IMP::String a1)
        set_value(MaturationStateDecorator self, ParticleIndexKey a0, Particle a1)
        set_value(MaturationStateDecorator self, ObjectKey a0, Object a1)
        set_value(MaturationStateDecorator self, SparseFloatKey a0, IMP::Float a1)
        set_value(MaturationStateDecorator self, SparseIntKey a0, IMP::Int a1)
        set_value(MaturationStateDecorator self, SparseStringKey a0, IMP::String a1)
        set_value(MaturationStateDecorator self, SparseParticleIndexKey a0, ParticleIndex a1)
        """
        return _IMP_insulinsecretion.MaturationStateDecorator_set_value(self, *args)

    def remove_attribute(self, *args):
        r"""
        remove_attribute(MaturationStateDecorator self, FloatKey a0)
        remove_attribute(MaturationStateDecorator self, IntKey a0)
        remove_attribute(MaturationStateDecorator self, FloatsKey a0)
        remove_attribute(MaturationStateDecorator self, IntsKey a0)
        remove_attribute(MaturationStateDecorator self, StringKey a0)
        remove_attribute(MaturationStateDecorator self, ParticleIndexKey a0)
        remove_attribute(MaturationStateDecorator self, ObjectKey a0)
        remove_attribute(MaturationStateDecorator self, SparseFloatKey a0)
        remove_attribute(MaturationStateDecorator self, SparseIntKey a0)
        remove_attribute(MaturationStateDecorator self, SparseStringKey a0)
        remove_attribute(MaturationStateDecorator self, SparseParticleIndexKey a0)
        """
        return _IMP_insulinsecretion.MaturationStateDecorator_remove_attribute(self, *args)

    def has_attribute(self, *args):
        r"""
        has_attribute(MaturationStateDecorator self, FloatKey a0) -> bool
        has_attribute(MaturationStateDecorator self, IntKey a0) -> bool
        has_attribute(MaturationStateDecorator self, FloatsKey a0) -> bool
        has_attribute(MaturationStateDecorator self, IntsKey a0) -> bool
        has_attribute(MaturationStateDecorator self, StringKey a0) -> bool
        has_attribute(MaturationStateDecorator self, ParticleIndexKey a0) -> bool
        has_attribute(MaturationStateDecorator self, ObjectKey a0) -> bool
        has_attribute(MaturationStateDecorator self, SparseFloatKey a0) -> bool
        has_attribute(MaturationStateDecorator self, SparseIntKey a0) -> bool
        has_attribute(MaturationStateDecorator self, SparseStringKey a0) -> bool
        has_attribute(MaturationStateDecorator self, SparseParticleIndexKey a0) -> bool
        """
        return _IMP_insulinsecretion.MaturationStateDecorator_has_attribute(self, *args)

    def get_derivative(self, a0):
        r"""get_derivative(MaturationStateDecorator self, FloatKey a0) -> double"""
        return _IMP_insulinsecretion.MaturationStateDecorator_get_derivative(self, a0)

    def get_name(self):
        r"""get_name(MaturationStateDecorator self) -> std::string"""
        return _IMP_insulinsecretion.MaturationStateDecorator_get_name(self)

    def clear_caches(self):
        r"""clear_caches(MaturationStateDecorator self)"""
        return _IMP_insulinsecretion.MaturationStateDecorator_clear_caches(self)

    def set_name(self, a0):
        r"""set_name(MaturationStateDecorator self, std::string a0)"""
        return _IMP_insulinsecretion.MaturationStateDecorator_set_name(self, a0)

    def set_check_level(self, a0):
        r"""set_check_level(MaturationStateDecorator self, IMP::CheckLevel a0)"""
        return _IMP_insulinsecretion.MaturationStateDecorator_set_check_level(self, a0)

    def add_to_derivative(self, a0, a1, a2):
        r"""add_to_derivative(MaturationStateDecorator self, FloatKey a0, double a1, DerivativeAccumulator a2)"""
        return _IMP_insulinsecretion.MaturationStateDecorator_add_to_derivative(self, a0, a1, a2)

    def set_is_optimized(self, a0, a1):
        r"""set_is_optimized(MaturationStateDecorator self, FloatKey a0, bool a1)"""
        return _IMP_insulinsecretion.MaturationStateDecorator_set_is_optimized(self, a0, a1)

    def get_is_optimized(self, a0):
        r"""get_is_optimized(MaturationStateDecorator self, FloatKey a0) -> bool"""
        return _IMP_insulinsecretion.MaturationStateDecorator_get_is_optimized(self, a0)

    def get_check_level(self):
        r"""get_check_level(MaturationStateDecorator self) -> IMP::CheckLevel"""
        return _IMP_insulinsecretion.MaturationStateDecorator_get_check_level(self)

    def __eq__(self, *args):
        r"""
        __eq__(MaturationStateDecorator self, MaturationStateDecorator o) -> bool
        __eq__(MaturationStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.MaturationStateDecorator___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(MaturationStateDecorator self, MaturationStateDecorator o) -> bool
        __ne__(MaturationStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.MaturationStateDecorator___ne__(self, *args)

    def __le__(self, *args):
        r"""
        __le__(MaturationStateDecorator self, MaturationStateDecorator o) -> bool
        __le__(MaturationStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.MaturationStateDecorator___le__(self, *args)

    def __lt__(self, *args):
        r"""
        __lt__(MaturationStateDecorator self, MaturationStateDecorator o) -> bool
        __lt__(MaturationStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.MaturationStateDecorator___lt__(self, *args)

    def __ge__(self, *args):
        r"""
        __ge__(MaturationStateDecorator self, MaturationStateDecorator o) -> bool
        __ge__(MaturationStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.MaturationStateDecorator___ge__(self, *args)

    def __gt__(self, *args):
        r"""
        __gt__(MaturationStateDecorator self, MaturationStateDecorator o) -> bool
        __gt__(MaturationStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.MaturationStateDecorator___gt__(self, *args)

    def __hash__(self):
        r"""__hash__(MaturationStateDecorator self) -> std::size_t"""
        return _IMP_insulinsecretion.MaturationStateDecorator___hash__(self)

    def __str__(self):
        r"""__str__(MaturationStateDecorator self) -> std::string"""
        return _IMP_insulinsecretion.MaturationStateDecorator___str__(self)

    def __repr__(self):
        r"""__repr__(MaturationStateDecorator self) -> std::string"""
        return _IMP_insulinsecretion.MaturationStateDecorator___repr__(self)

    def _get_as_binary(self):
        r"""_get_as_binary(MaturationStateDecorator self) -> PyObject *"""
        return _IMP_insulinsecretion.MaturationStateDecorator__get_as_binary(self)

    def _set_from_binary(self, p):
        r"""_set_from_binary(MaturationStateDecorator self, PyObject * p)"""
        return _IMP_insulinsecretion.MaturationStateDecorator__set_from_binary(self, p)

    def __getstate__(self):
        p = self._get_as_binary()
        if len(self.__dict__) > 1:
            d = self.__dict__.copy()
            del d['this']
            p = (d, p)
        return p

    def __setstate__(self, p):
        if not hasattr(self, 'this'):
            self.__init__()
        if isinstance(p, tuple):
            d, p = p
            self.__dict__.update(d)
        return self._set_from_binary(p)

    __swig_destroy__ = _IMP_insulinsecretion.delete_MaturationStateDecorator

# Register MaturationStateDecorator in _IMP_insulinsecretion:
_IMP_insulinsecretion.MaturationStateDecorator_swigregister(MaturationStateDecorator)
class DockingStateDecorator(IMP.Decorator):
    r"""Proxy of C++ IMP::insulinsecretion::DockingStateDecorator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def get_dstate(self):
        r"""get_dstate(DockingStateDecorator self) -> IMP::Int"""
        return _IMP_insulinsecretion.DockingStateDecorator_get_dstate(self)

    def set_dstate(self, d):
        r"""set_dstate(DockingStateDecorator self, IMP::Int d)"""
        return _IMP_insulinsecretion.DockingStateDecorator_set_dstate(self, d)

    def __init__(self, *args):
        r"""
        __init__(DockingStateDecorator self) -> DockingStateDecorator
        __init__(DockingStateDecorator self, Model m, ParticleIndex id) -> DockingStateDecorator
        __init__(DockingStateDecorator self, _ParticleAdaptor d) -> DockingStateDecorator
        """
        _IMP_insulinsecretion.DockingStateDecorator_swiginit(self, _IMP_insulinsecretion.new_DockingStateDecorator(*args))

    @staticmethod
    def get_is_setup(*args):
        r"""
        get_is_setup(Model m, ParticleIndex pi) -> bool
        get_is_setup(_ParticleAdaptor p) -> bool
        """
        return _IMP_insulinsecretion.DockingStateDecorator_get_is_setup(*args)

    def show(self, *args):
        r"""show(DockingStateDecorator self, _ostream out=std::cout)"""
        return _IMP_insulinsecretion.DockingStateDecorator_show(self, *args)

    @staticmethod
    def setup_particle(*args):
        r"""
        setup_particle(Model m, ParticleIndex pi, IMP::Int dstate) -> DockingStateDecorator
        setup_particle(_ParticleAdaptor pa, IMP::Int dstate) -> DockingStateDecorator
        setup_particle(Model m, ParticleIndex pi, DockingStateDecorator other) -> DockingStateDecorator
        setup_particle(_ParticleAdaptor pa, DockingStateDecorator other) -> DockingStateDecorator
        """
        return _IMP_insulinsecretion.DockingStateDecorator_setup_particle(*args)

    @staticmethod
    def get_dstate_key():
        r"""get_dstate_key() -> IntKey"""
        return _IMP_insulinsecretion.DockingStateDecorator_get_dstate_key()

    def add_attribute(self, *args):
        r"""
        add_attribute(DockingStateDecorator self, FloatKey k, IMP::Float v, bool opt)
        add_attribute(DockingStateDecorator self, FloatKey a0, IMP::Float a1)
        add_attribute(DockingStateDecorator self, IntKey a0, IMP::Int a1)
        add_attribute(DockingStateDecorator self, FloatsKey a0, IMP::Floats a1)
        add_attribute(DockingStateDecorator self, IntsKey a0, IMP::Ints a1)
        add_attribute(DockingStateDecorator self, StringKey a0, IMP::String a1)
        add_attribute(DockingStateDecorator self, ParticleIndexKey a0, Particle a1)
        add_attribute(DockingStateDecorator self, ObjectKey a0, Object a1)
        add_attribute(DockingStateDecorator self, SparseFloatKey a0, IMP::Float a1)
        add_attribute(DockingStateDecorator self, SparseIntKey a0, IMP::Int a1)
        add_attribute(DockingStateDecorator self, SparseStringKey a0, IMP::String a1)
        add_attribute(DockingStateDecorator self, SparseParticleIndexKey a0, ParticleIndex a1)
        """
        return _IMP_insulinsecretion.DockingStateDecorator_add_attribute(self, *args)

    def get_value(self, *args):
        r"""
        get_value(DockingStateDecorator self, FloatKey a0) -> IMP::Float
        get_value(DockingStateDecorator self, IntKey a0) -> IMP::Int
        get_value(DockingStateDecorator self, FloatsKey a0) -> IMP::Floats
        get_value(DockingStateDecorator self, IntsKey a0) -> IMP::Ints
        get_value(DockingStateDecorator self, StringKey a0) -> IMP::String
        get_value(DockingStateDecorator self, ParticleIndexKey a0) -> Particle
        get_value(DockingStateDecorator self, ObjectKey a0) -> Object
        get_value(DockingStateDecorator self, SparseFloatKey a0) -> IMP::Float
        get_value(DockingStateDecorator self, SparseIntKey a0) -> IMP::Int
        get_value(DockingStateDecorator self, SparseStringKey a0) -> IMP::String
        get_value(DockingStateDecorator self, SparseParticleIndexKey a0) -> ParticleIndex
        """
        return _IMP_insulinsecretion.DockingStateDecorator_get_value(self, *args)

    def set_value(self, *args):
        r"""
        set_value(DockingStateDecorator self, FloatKey a0, IMP::Float a1)
        set_value(DockingStateDecorator self, IntKey a0, IMP::Int a1)
        set_value(DockingStateDecorator self, FloatsKey a0, IMP::Floats a1)
        set_value(DockingStateDecorator self, IntsKey a0, IMP::Ints a1)
        set_value(DockingStateDecorator self, StringKey a0, IMP::String a1)
        set_value(DockingStateDecorator self, ParticleIndexKey a0, Particle a1)
        set_value(DockingStateDecorator self, ObjectKey a0, Object a1)
        set_value(DockingStateDecorator self, SparseFloatKey a0, IMP::Float a1)
        set_value(DockingStateDecorator self, SparseIntKey a0, IMP::Int a1)
        set_value(DockingStateDecorator self, SparseStringKey a0, IMP::String a1)
        set_value(DockingStateDecorator self, SparseParticleIndexKey a0, ParticleIndex a1)
        """
        return _IMP_insulinsecretion.DockingStateDecorator_set_value(self, *args)

    def remove_attribute(self, *args):
        r"""
        remove_attribute(DockingStateDecorator self, FloatKey a0)
        remove_attribute(DockingStateDecorator self, IntKey a0)
        remove_attribute(DockingStateDecorator self, FloatsKey a0)
        remove_attribute(DockingStateDecorator self, IntsKey a0)
        remove_attribute(DockingStateDecorator self, StringKey a0)
        remove_attribute(DockingStateDecorator self, ParticleIndexKey a0)
        remove_attribute(DockingStateDecorator self, ObjectKey a0)
        remove_attribute(DockingStateDecorator self, SparseFloatKey a0)
        remove_attribute(DockingStateDecorator self, SparseIntKey a0)
        remove_attribute(DockingStateDecorator self, SparseStringKey a0)
        remove_attribute(DockingStateDecorator self, SparseParticleIndexKey a0)
        """
        return _IMP_insulinsecretion.DockingStateDecorator_remove_attribute(self, *args)

    def has_attribute(self, *args):
        r"""
        has_attribute(DockingStateDecorator self, FloatKey a0) -> bool
        has_attribute(DockingStateDecorator self, IntKey a0) -> bool
        has_attribute(DockingStateDecorator self, FloatsKey a0) -> bool
        has_attribute(DockingStateDecorator self, IntsKey a0) -> bool
        has_attribute(DockingStateDecorator self, StringKey a0) -> bool
        has_attribute(DockingStateDecorator self, ParticleIndexKey a0) -> bool
        has_attribute(DockingStateDecorator self, ObjectKey a0) -> bool
        has_attribute(DockingStateDecorator self, SparseFloatKey a0) -> bool
        has_attribute(DockingStateDecorator self, SparseIntKey a0) -> bool
        has_attribute(DockingStateDecorator self, SparseStringKey a0) -> bool
        has_attribute(DockingStateDecorator self, SparseParticleIndexKey a0) -> bool
        """
        return _IMP_insulinsecretion.DockingStateDecorator_has_attribute(self, *args)

    def get_derivative(self, a0):
        r"""get_derivative(DockingStateDecorator self, FloatKey a0) -> double"""
        return _IMP_insulinsecretion.DockingStateDecorator_get_derivative(self, a0)

    def get_name(self):
        r"""get_name(DockingStateDecorator self) -> std::string"""
        return _IMP_insulinsecretion.DockingStateDecorator_get_name(self)

    def clear_caches(self):
        r"""clear_caches(DockingStateDecorator self)"""
        return _IMP_insulinsecretion.DockingStateDecorator_clear_caches(self)

    def set_name(self, a0):
        r"""set_name(DockingStateDecorator self, std::string a0)"""
        return _IMP_insulinsecretion.DockingStateDecorator_set_name(self, a0)

    def set_check_level(self, a0):
        r"""set_check_level(DockingStateDecorator self, IMP::CheckLevel a0)"""
        return _IMP_insulinsecretion.DockingStateDecorator_set_check_level(self, a0)

    def add_to_derivative(self, a0, a1, a2):
        r"""add_to_derivative(DockingStateDecorator self, FloatKey a0, double a1, DerivativeAccumulator a2)"""
        return _IMP_insulinsecretion.DockingStateDecorator_add_to_derivative(self, a0, a1, a2)

    def set_is_optimized(self, a0, a1):
        r"""set_is_optimized(DockingStateDecorator self, FloatKey a0, bool a1)"""
        return _IMP_insulinsecretion.DockingStateDecorator_set_is_optimized(self, a0, a1)

    def get_is_optimized(self, a0):
        r"""get_is_optimized(DockingStateDecorator self, FloatKey a0) -> bool"""
        return _IMP_insulinsecretion.DockingStateDecorator_get_is_optimized(self, a0)

    def get_check_level(self):
        r"""get_check_level(DockingStateDecorator self) -> IMP::CheckLevel"""
        return _IMP_insulinsecretion.DockingStateDecorator_get_check_level(self)

    def __eq__(self, *args):
        r"""
        __eq__(DockingStateDecorator self, DockingStateDecorator o) -> bool
        __eq__(DockingStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.DockingStateDecorator___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(DockingStateDecorator self, DockingStateDecorator o) -> bool
        __ne__(DockingStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.DockingStateDecorator___ne__(self, *args)

    def __le__(self, *args):
        r"""
        __le__(DockingStateDecorator self, DockingStateDecorator o) -> bool
        __le__(DockingStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.DockingStateDecorator___le__(self, *args)

    def __lt__(self, *args):
        r"""
        __lt__(DockingStateDecorator self, DockingStateDecorator o) -> bool
        __lt__(DockingStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.DockingStateDecorator___lt__(self, *args)

    def __ge__(self, *args):
        r"""
        __ge__(DockingStateDecorator self, DockingStateDecorator o) -> bool
        __ge__(DockingStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.DockingStateDecorator___ge__(self, *args)

    def __gt__(self, *args):
        r"""
        __gt__(DockingStateDecorator self, DockingStateDecorator o) -> bool
        __gt__(DockingStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.DockingStateDecorator___gt__(self, *args)

    def __hash__(self):
        r"""__hash__(DockingStateDecorator self) -> std::size_t"""
        return _IMP_insulinsecretion.DockingStateDecorator___hash__(self)

    def __str__(self):
        r"""__str__(DockingStateDecorator self) -> std::string"""
        return _IMP_insulinsecretion.DockingStateDecorator___str__(self)

    def __repr__(self):
        r"""__repr__(DockingStateDecorator self) -> std::string"""
        return _IMP_insulinsecretion.DockingStateDecorator___repr__(self)

    def _get_as_binary(self):
        r"""_get_as_binary(DockingStateDecorator self) -> PyObject *"""
        return _IMP_insulinsecretion.DockingStateDecorator__get_as_binary(self)

    def _set_from_binary(self, p):
        r"""_set_from_binary(DockingStateDecorator self, PyObject * p)"""
        return _IMP_insulinsecretion.DockingStateDecorator__set_from_binary(self, p)

    def __getstate__(self):
        p = self._get_as_binary()
        if len(self.__dict__) > 1:
            d = self.__dict__.copy()
            del d['this']
            p = (d, p)
        return p

    def __setstate__(self, p):
        if not hasattr(self, 'this'):
            self.__init__()
        if isinstance(p, tuple):
            d, p = p
            self.__dict__.update(d)
        return self._set_from_binary(p)

    __swig_destroy__ = _IMP_insulinsecretion.delete_DockingStateDecorator

# Register DockingStateDecorator in _IMP_insulinsecretion:
_IMP_insulinsecretion.DockingStateDecorator_swigregister(DockingStateDecorator)
class CaChannelStateDecorator(IMP.Decorator):
    r"""Proxy of C++ IMP::insulinsecretion::CaChannelStateDecorator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def get_channelstate(self):
        r"""get_channelstate(CaChannelStateDecorator self) -> IMP::Int"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_get_channelstate(self)

    def set_channelstate(self, d):
        r"""set_channelstate(CaChannelStateDecorator self, IMP::Int d)"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_set_channelstate(self, d)

    def __init__(self, *args):
        r"""
        __init__(CaChannelStateDecorator self) -> CaChannelStateDecorator
        __init__(CaChannelStateDecorator self, Model m, ParticleIndex id) -> CaChannelStateDecorator
        __init__(CaChannelStateDecorator self, _ParticleAdaptor d) -> CaChannelStateDecorator
        """
        _IMP_insulinsecretion.CaChannelStateDecorator_swiginit(self, _IMP_insulinsecretion.new_CaChannelStateDecorator(*args))

    @staticmethod
    def get_is_setup(*args):
        r"""
        get_is_setup(Model m, ParticleIndex pi) -> bool
        get_is_setup(_ParticleAdaptor p) -> bool
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator_get_is_setup(*args)

    def show(self, *args):
        r"""show(CaChannelStateDecorator self, _ostream out=std::cout)"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_show(self, *args)

    @staticmethod
    def setup_particle(*args):
        r"""
        setup_particle(Model m, ParticleIndex pi, IMP::Int channelstate) -> CaChannelStateDecorator
        setup_particle(_ParticleAdaptor pa, IMP::Int channelstate) -> CaChannelStateDecorator
        setup_particle(Model m, ParticleIndex pi, CaChannelStateDecorator other) -> CaChannelStateDecorator
        setup_particle(_ParticleAdaptor pa, CaChannelStateDecorator other) -> CaChannelStateDecorator
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator_setup_particle(*args)

    @staticmethod
    def get_channelstate_key():
        r"""get_channelstate_key() -> IntKey"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_get_channelstate_key()

    def add_attribute(self, *args):
        r"""
        add_attribute(CaChannelStateDecorator self, FloatKey k, IMP::Float v, bool opt)
        add_attribute(CaChannelStateDecorator self, FloatKey a0, IMP::Float a1)
        add_attribute(CaChannelStateDecorator self, IntKey a0, IMP::Int a1)
        add_attribute(CaChannelStateDecorator self, FloatsKey a0, IMP::Floats a1)
        add_attribute(CaChannelStateDecorator self, IntsKey a0, IMP::Ints a1)
        add_attribute(CaChannelStateDecorator self, StringKey a0, IMP::String a1)
        add_attribute(CaChannelStateDecorator self, ParticleIndexKey a0, Particle a1)
        add_attribute(CaChannelStateDecorator self, ObjectKey a0, Object a1)
        add_attribute(CaChannelStateDecorator self, SparseFloatKey a0, IMP::Float a1)
        add_attribute(CaChannelStateDecorator self, SparseIntKey a0, IMP::Int a1)
        add_attribute(CaChannelStateDecorator self, SparseStringKey a0, IMP::String a1)
        add_attribute(CaChannelStateDecorator self, SparseParticleIndexKey a0, ParticleIndex a1)
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator_add_attribute(self, *args)

    def get_value(self, *args):
        r"""
        get_value(CaChannelStateDecorator self, FloatKey a0) -> IMP::Float
        get_value(CaChannelStateDecorator self, IntKey a0) -> IMP::Int
        get_value(CaChannelStateDecorator self, FloatsKey a0) -> IMP::Floats
        get_value(CaChannelStateDecorator self, IntsKey a0) -> IMP::Ints
        get_value(CaChannelStateDecorator self, StringKey a0) -> IMP::String
        get_value(CaChannelStateDecorator self, ParticleIndexKey a0) -> Particle
        get_value(CaChannelStateDecorator self, ObjectKey a0) -> Object
        get_value(CaChannelStateDecorator self, SparseFloatKey a0) -> IMP::Float
        get_value(CaChannelStateDecorator self, SparseIntKey a0) -> IMP::Int
        get_value(CaChannelStateDecorator self, SparseStringKey a0) -> IMP::String
        get_value(CaChannelStateDecorator self, SparseParticleIndexKey a0) -> ParticleIndex
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator_get_value(self, *args)

    def set_value(self, *args):
        r"""
        set_value(CaChannelStateDecorator self, FloatKey a0, IMP::Float a1)
        set_value(CaChannelStateDecorator self, IntKey a0, IMP::Int a1)
        set_value(CaChannelStateDecorator self, FloatsKey a0, IMP::Floats a1)
        set_value(CaChannelStateDecorator self, IntsKey a0, IMP::Ints a1)
        set_value(CaChannelStateDecorator self, StringKey a0, IMP::String a1)
        set_value(CaChannelStateDecorator self, ParticleIndexKey a0, Particle a1)
        set_value(CaChannelStateDecorator self, ObjectKey a0, Object a1)
        set_value(CaChannelStateDecorator self, SparseFloatKey a0, IMP::Float a1)
        set_value(CaChannelStateDecorator self, SparseIntKey a0, IMP::Int a1)
        set_value(CaChannelStateDecorator self, SparseStringKey a0, IMP::String a1)
        set_value(CaChannelStateDecorator self, SparseParticleIndexKey a0, ParticleIndex a1)
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator_set_value(self, *args)

    def remove_attribute(self, *args):
        r"""
        remove_attribute(CaChannelStateDecorator self, FloatKey a0)
        remove_attribute(CaChannelStateDecorator self, IntKey a0)
        remove_attribute(CaChannelStateDecorator self, FloatsKey a0)
        remove_attribute(CaChannelStateDecorator self, IntsKey a0)
        remove_attribute(CaChannelStateDecorator self, StringKey a0)
        remove_attribute(CaChannelStateDecorator self, ParticleIndexKey a0)
        remove_attribute(CaChannelStateDecorator self, ObjectKey a0)
        remove_attribute(CaChannelStateDecorator self, SparseFloatKey a0)
        remove_attribute(CaChannelStateDecorator self, SparseIntKey a0)
        remove_attribute(CaChannelStateDecorator self, SparseStringKey a0)
        remove_attribute(CaChannelStateDecorator self, SparseParticleIndexKey a0)
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator_remove_attribute(self, *args)

    def has_attribute(self, *args):
        r"""
        has_attribute(CaChannelStateDecorator self, FloatKey a0) -> bool
        has_attribute(CaChannelStateDecorator self, IntKey a0) -> bool
        has_attribute(CaChannelStateDecorator self, FloatsKey a0) -> bool
        has_attribute(CaChannelStateDecorator self, IntsKey a0) -> bool
        has_attribute(CaChannelStateDecorator self, StringKey a0) -> bool
        has_attribute(CaChannelStateDecorator self, ParticleIndexKey a0) -> bool
        has_attribute(CaChannelStateDecorator self, ObjectKey a0) -> bool
        has_attribute(CaChannelStateDecorator self, SparseFloatKey a0) -> bool
        has_attribute(CaChannelStateDecorator self, SparseIntKey a0) -> bool
        has_attribute(CaChannelStateDecorator self, SparseStringKey a0) -> bool
        has_attribute(CaChannelStateDecorator self, SparseParticleIndexKey a0) -> bool
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator_has_attribute(self, *args)

    def get_derivative(self, a0):
        r"""get_derivative(CaChannelStateDecorator self, FloatKey a0) -> double"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_get_derivative(self, a0)

    def get_name(self):
        r"""get_name(CaChannelStateDecorator self) -> std::string"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_get_name(self)

    def clear_caches(self):
        r"""clear_caches(CaChannelStateDecorator self)"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_clear_caches(self)

    def set_name(self, a0):
        r"""set_name(CaChannelStateDecorator self, std::string a0)"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_set_name(self, a0)

    def set_check_level(self, a0):
        r"""set_check_level(CaChannelStateDecorator self, IMP::CheckLevel a0)"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_set_check_level(self, a0)

    def add_to_derivative(self, a0, a1, a2):
        r"""add_to_derivative(CaChannelStateDecorator self, FloatKey a0, double a1, DerivativeAccumulator a2)"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_add_to_derivative(self, a0, a1, a2)

    def set_is_optimized(self, a0, a1):
        r"""set_is_optimized(CaChannelStateDecorator self, FloatKey a0, bool a1)"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_set_is_optimized(self, a0, a1)

    def get_is_optimized(self, a0):
        r"""get_is_optimized(CaChannelStateDecorator self, FloatKey a0) -> bool"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_get_is_optimized(self, a0)

    def get_check_level(self):
        r"""get_check_level(CaChannelStateDecorator self) -> IMP::CheckLevel"""
        return _IMP_insulinsecretion.CaChannelStateDecorator_get_check_level(self)

    def __eq__(self, *args):
        r"""
        __eq__(CaChannelStateDecorator self, CaChannelStateDecorator o) -> bool
        __eq__(CaChannelStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(CaChannelStateDecorator self, CaChannelStateDecorator o) -> bool
        __ne__(CaChannelStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator___ne__(self, *args)

    def __le__(self, *args):
        r"""
        __le__(CaChannelStateDecorator self, CaChannelStateDecorator o) -> bool
        __le__(CaChannelStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator___le__(self, *args)

    def __lt__(self, *args):
        r"""
        __lt__(CaChannelStateDecorator self, CaChannelStateDecorator o) -> bool
        __lt__(CaChannelStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator___lt__(self, *args)

    def __ge__(self, *args):
        r"""
        __ge__(CaChannelStateDecorator self, CaChannelStateDecorator o) -> bool
        __ge__(CaChannelStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator___ge__(self, *args)

    def __gt__(self, *args):
        r"""
        __gt__(CaChannelStateDecorator self, CaChannelStateDecorator o) -> bool
        __gt__(CaChannelStateDecorator self, Particle d) -> bool
        """
        return _IMP_insulinsecretion.CaChannelStateDecorator___gt__(self, *args)

    def __hash__(self):
        r"""__hash__(CaChannelStateDecorator self) -> std::size_t"""
        return _IMP_insulinsecretion.CaChannelStateDecorator___hash__(self)

    def __str__(self):
        r"""__str__(CaChannelStateDecorator self) -> std::string"""
        return _IMP_insulinsecretion.CaChannelStateDecorator___str__(self)

    def __repr__(self):
        r"""__repr__(CaChannelStateDecorator self) -> std::string"""
        return _IMP_insulinsecretion.CaChannelStateDecorator___repr__(self)

    def _get_as_binary(self):
        r"""_get_as_binary(CaChannelStateDecorator self) -> PyObject *"""
        return _IMP_insulinsecretion.CaChannelStateDecorator__get_as_binary(self)

    def _set_from_binary(self, p):
        r"""_set_from_binary(CaChannelStateDecorator self, PyObject * p)"""
        return _IMP_insulinsecretion.CaChannelStateDecorator__set_from_binary(self, p)

    def __getstate__(self):
        p = self._get_as_binary()
        if len(self.__dict__) > 1:
            d = self.__dict__.copy()
            del d['this']
            p = (d, p)
        return p

    def __setstate__(self, p):
        if not hasattr(self, 'this'):
            self.__init__()
        if isinstance(p, tuple):
            d, p = p
            self.__dict__.update(d)
        return self._set_from_binary(p)

    __swig_destroy__ = _IMP_insulinsecretion.delete_CaChannelStateDecorator

# Register CaChannelStateDecorator in _IMP_insulinsecretion:
_IMP_insulinsecretion.CaChannelStateDecorator_swigregister(CaChannelStateDecorator)

def get_module_version():
    r"""get_module_version() -> std::string const"""
    return _IMP_insulinsecretion.get_module_version()

def get_example_path(fname):
    r"""get_example_path(std::string fname) -> std::string"""
    return _IMP_insulinsecretion.get_example_path(fname)

def get_data_path(fname):
    r"""get_data_path(std::string fname) -> std::string"""
    return _IMP_insulinsecretion.get_data_path(fname)

from . import _version_check
_version_check.check_version(get_module_version())
__version__ = get_module_version()


